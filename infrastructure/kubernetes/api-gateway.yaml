################################################################################
# Kubernetes Deployment, Service, HPA, and NetworkPolicy for the API Gateway
# This file is designed for Kubernetes v1.28 with a high-availability, secure,
# and production-driven configuration that satisfies:
# 1) Enhanced resilience and rolling updates
# 2) Strict security contexts, RBAC policies, and network restrictions
# 3) Automatic scaling via resource-based HorizontalPodAutoscaler
# 4) Comprehensive health checks and instrumentation for 99.9% uptime
#
# The resources below reference:
# - ConfigMap: api-gateway-config (non-sensitive configuration)
# - Secret: api-gateway-secrets (sensitive credentials and TLS material)
#
# Each YAML document is separated by "---". These four documents include:
# 1) Deployment (apps/v1)
# 2) Service (v1)
# 3) HorizontalPodAutoscaler (autoscaling/v2)
# 4) NetworkPolicy (networking.k8s.io/v1)
################################################################################

---
apiVersion: apps/v1
kind: Deployment
metadata:
  # Unique name for the Deployment of the API Gateway
  name: api-gateway
  # Namespace dedicated to the API Gateway component
  namespace: api-gateway
  # Common labels for resource identification and grouping
  labels:
    app: api-gateway
    component: gateway
    part-of: dog-walking-platform
  # Annotations used for security enforcement and metrics scraping
  annotations:
    security.kubernetes.io/enforce-pod-security: "restricted"
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
    prometheus.io/path: "/metrics"
spec:
  # Ensures three replicas for high availability
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      # Allows only one new Pod above the desired count
      maxSurge: 1
      # No Pods can go unavailable during rolling updates
      maxUnavailable: 0
  selector:
    matchLabels:
      app: api-gateway
  template:
    metadata:
      labels:
        app: api-gateway
      annotations:
        # Vault annotations (example usage for secrets injection)
        vault.hashicorp.com/agent-inject: "true"
        vault.hashicorp.com/role: "api-gateway"
    spec:
      # Global Pod security settings for non-root operation and seccomp protection
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 2000
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: api-gateway
          # Latest production image for the API Gateway
          image: dogwalking/api-gateway:latest
          # Container-level security context to avoid elevated capabilities
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
          ports:
            - containerPort: 8080
              protocol: TCP
          resources:
            # Resource requests ensure adequate CPU and memory
            requests:
              cpu: "500m"
              memory: "512Mi"
            # Resource limits cap container usage for stable multi-tenant operation
            limits:
              cpu: "1000m"
              memory: "1Gi"
          ########################################################################
          # Environment Variables
          #   - Sourced from ConfigMap: api-gateway-config for essential settings
          #   - Sourced from Secret: api-gateway-secrets for sensitive credentials
          ########################################################################
          env:
            - name: PORT
              valueFrom:
                configMapKeyRef:
                  name: api-gateway-config
                  key: PORT
            - name: NODE_ENV
              valueFrom:
                configMapKeyRef:
                  name: api-gateway-config
                  key: NODE_ENV
            - name: RATE_LIMIT_WINDOW
              valueFrom:
                configMapKeyRef:
                  name: api-gateway-config
                  key: RATE_LIMIT_WINDOW
            - name: TRACING_ENABLED
              valueFrom:
                configMapKeyRef:
                  name: api-gateway-config
                  key: TRACING_ENABLED
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: api-gateway-secrets
                  key: JWT_SECRET
            - name: API_KEYS
              valueFrom:
                secretKeyRef:
                  name: api-gateway-secrets
                  key: API_KEYS
          ########################################################################
          # Health and Startup Probes
          #   - startupProbe helps avoid false positives on slow initial boot
          #   - livenessProbe ensures container is healthy at runtime
          #   - readinessProbe ensures traffic is only sent once ready
          ########################################################################
          startupProbe:
            httpGet:
              path: /startup
              port: 8080
            failureThreshold: 30
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /ready
              port: 8080
            initialDelaySeconds: 15
            periodSeconds: 5
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 3
          ########################################################################
          # Volume Mounts
          #   - Temporary directory for OS-level tmp usage
          #   - TLS volume holding cert/key from the "api-gateway-tls" secret
          ########################################################################
          volumeMounts:
            - name: tmp
              mountPath: /tmp
            - name: tls
              mountPath: /etc/tls
              readOnly: true
      volumes:
        - name: tmp
          emptyDir: {}
        - name: tls
          secret:
            secretName: api-gateway-tls
      ########################################################################
      # Affinity to spread Pods across cluster nodes for improved HA
      ########################################################################
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - api-gateway
                topologyKey: kubernetes.io/hostname

---
apiVersion: v1
kind: Service
metadata:
  name: api-gateway-service
  namespace: api-gateway
  annotations:
    # AWS-specific annotations for an NLB with SSL termination
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "${AWS_CERT_ARN}"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "http"
spec:
  type: LoadBalancer
  # Exposes a secure listener on port 443, forwarding to container port 8080
  ports:
    - port: 443
      targetPort: 8080
      protocol: TCP
  selector:
    app: api-gateway

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: api-gateway-hpa
  namespace: api-gateway
spec:
  # Links the HPA to the Deployment named "api-gateway"
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: api-gateway
  # Minimum and maximum replica boundaries
  minReplicas: 3
  maxReplicas: 10
  # Metrics-based scaling (CPU and Memory utilization)
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
  # Provides fine-grained control over scale-up/scale-down speeds
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
        - type: Pods
          value: 2
          periodSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Pods
          value: 1
          periodSeconds: 120

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: api-gateway-network-policy
  namespace: api-gateway
spec:
  # Applies to any Pod labeled with app=api-gateway
  podSelector:
    matchLabels:
      app: api-gateway
  policyTypes:
    - Ingress
    - Egress
  ########################################################################
  # Ingress Policy: Only allow inbound traffic on port 8080 from 10.0.0.0/8
  # except for a smaller block to further tighten security.
  ########################################################################
  ingress:
    - ports:
        - port: 8080
          protocol: TCP
      from:
        - ipBlock:
            cidr: 10.0.0.0/8
            except:
              - 10.0.0.0/24
  ########################################################################
  # Egress Policy: Permit outbound traffic on port 8080 only to namespaced
  # services with matching namespaceSelector labels (auth, booking, payment,
  # tracking, notification).
  ########################################################################
  egress:
    - to:
        - namespaceSelector:
            matchLabels:
              name: auth-service
        - namespaceSelector:
            matchLabels:
              name: booking-service
        - namespaceSelector:
            matchLabels:
              name: payment-service
        - namespaceSelector:
            matchLabels:
              name: tracking-service
        - namespaceSelector:
            matchLabels:
              name: notification-service
      ports:
        - port: 8080
          protocol: TCP