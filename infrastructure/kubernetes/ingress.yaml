################################################################################
# Kubernetes Ingress Manifest for the Dog Walking Platform
# ------------------------------------------------------------------------------
# This file is validated against:
#   - Kubernetes v1.28  (see external import reference)
#   - NGINX Ingress Controller v1.8.1
#
# Purpose:
# 1) Configure external access via HTTP/HTTPS (TLS termination) for the core
#    microservices of the platform: Auth Service, Booking Service, and the
#    API Gateway.
# 2) Enforce production-ready security features:
#    - SSL redirection
#    - Strict security headers (X-Frame-Options, X-Content-Type-Options,
#      X-XSS-Protection)
#    - Rate limiting (RPM-based)
#    - CORS enablement with specific methods and headers allowed
# 3) Provide high availability as described in the system architecture,
#    including multiple paths for separate microservices.
# 4) Leverage cert-manager for automatic TLS certificate management using
#    a publicly trusted Certificate Issuer (e.g., Let’s Encrypt).
#
# References to Implementation Requirements:
# ------------------------------------------------------------------------------
# - High Availability (Technical Spec 2.1 High-Level Architecture):
#   Ensures load balancing and routing across services with robust TLS handling.
# - Security Architecture (Technical Spec 2.4.2):
#   Imposes strict security headers, rate limiting, TLS, and secure CORS settings.
# - API Management (Technical Spec 2.2.1 Core Components):
#   Centralized routing for versioned endpoints under a single domain host
#   (api.dogwalking.com), delegating to relevant services internally.
################################################################################

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: dog-walking-ingress
  namespace: default

  #######################################################################
  # ANNOTATIONS:
  # - kubernetes.io/ingress.class: Specifies the Ingress Controller type.
  # - nginx.ingress.kubernetes.io/ssl-redirect: Forces HTTPS and auto-redirects HTTP.
  # - nginx.ingress.kubernetes.io/proxy-body-size: Limits request body to 8MB.
  # - nginx.ingress.kubernetes.io/proxy-read-timeout: Ensures the controller times out
  #   reading responses after 60s to maintain stable connections.
  # - nginx.ingress.kubernetes.io/proxy-send-timeout: Ensures the controller stops
  #   sending data if it takes >60s to transmit.
  # - nginx.ingress.kubernetes.io/rate-limit-rpm: Restricts requests per minute (100)
  #   to mitigate abuse and DDoS vectors.
  # - nginx.ingress.kubernetes.io/enable-cors: Globally enables Cross-Origin Resource Sharing.
  # - nginx.ingress.kubernetes.io/cors-allow-methods: Specifies which HTTP methods are allowed
  #   for cross-domain requests.
  # - nginx.ingress.kubernetes.io/cors-allow-headers: Specifies which HTTP headers are permitted
  #   within cross-domain requests.
  # - nginx.ingress.kubernetes.io/configuration-snippet: Injects advanced security headers
  #   (X-Frame-Options, X-Content-Type-Options, X-XSS-Protection).
  # - cert-manager.io/cluster-issuer: Hook for Let’s Encrypt or another issuer for
  #   certificate management.
  #######################################################################
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "8m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/rate-limit-rpm: "100"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "X-Frame-Options: DENY";
      more_set_headers "X-Content-Type-Options: nosniff";
      more_set_headers "X-XSS-Protection: 1; mode=block";
    cert-manager.io/cluster-issuer: "letsencrypt-prod"

spec:
  #######################################################################
  # TLS CONFIGURATION:
  # - Hosts: The domain name(s) for which TLS certificates apply.
  # - secretName: The secret containing the server.crt and server.key
  #   generated by cert-manager or another TLS provisioning flow.
  #######################################################################
  tls:
    - hosts:
        - api.dogwalking.com
      secretName: dogwalking-tls

  #######################################################################
  # RULES:
  # - Host: The FQDN where the Ingress routes traffic.
  # - HTTP paths: Each path entry defines which service receives traffic
  #   based on the path prefix. This Ingress routes:
  #   1) /api/v1/auth -> Auth Service (exposed on port 3000)
  #   2) /api/v1/bookings -> Booking Service (exposed on port 8082)
  #   3) / -> API Gateway Service (exposed on port 443)
  #   PathType: "Prefix" ensures all subpaths match.
  #######################################################################
  rules:
    - host: api.dogwalking.com
      http:
        paths:
          ###################################################################
          # 1) AUTH SERVICE ROUTE
          ###################################################################
          - path: "/api/v1/auth"
            pathType: Prefix
            backend:
              service:
                # Sourced from the auth-service.yaml definition
                name: auth-service
                port:
                  number: 3000

          ###################################################################
          # 2) BOOKING SERVICE ROUTE
          ###################################################################
          - path: "/api/v1/bookings"
            pathType: Prefix
            backend:
              service:
                # Sourced from the booking-service.yaml definition
                name: booking-service
                port:
                  number: 8082

          ###################################################################
          # 3) API GATEWAY ROUTE (FALLBACK FOR ALL OTHER REQUESTS)
          ###################################################################
          - path: "/"
            pathType: Prefix
            backend:
              service:
                # Sourced from the api-gateway.yaml definition
                name: api-gateway-service
                port:
                  number: 443