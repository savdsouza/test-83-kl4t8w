################################################################################
# Kubernetes Deployment, Service, and HorizontalPodAutoscaler (HPA) for the
# Tracking Service. This microservice is responsible for real-time location
# tracking, geofencing, and route optimization per the Technical Specifications.
# References:
# - Kubernetes v1.28 API (external import)
# - tracking-service-config (ConfigMap) from configmaps.yaml (internal import)
# - tracking-service-secrets (Secret) from secrets.yaml (internal import)
#
# Exports:
# - tracking-service-deployment:
#     - http_port: 8082
#     - health_check: /ready
#     - metrics: /metrics
# - tracking-service-service:
#     - cluster_ip: The internal IP address assigned by the cluster
# - tracking-service-hpa:
#     - scaling_rules: CPU (70% avgUtil), Memory (80% avgUtil)
################################################################################

---
################################################################################
# Deployment Manifest
# This defines the pod template, replica count, rolling update strategy,
# container settings, health probes, resource requests/limits, and references
# to ConfigMaps and Secrets for the Tracking Service.
################################################################################
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tracking-service
  namespace: tracking-service
  labels:
    app: tracking-service
    component: backend
    part-of: dog-walking-platform
spec:
  ########################################################################
  # Ensures we start with 3 replicas and supports rolling updates during
  # new version deployments to maintain a minimum disruption to services,
  # aligning with the 99.9% availability SLA.
  ########################################################################
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  ########################################################################
  # Match labels ensures that only pods with label app=tracking-service
  # are managed by this Deployment. The template metadata mirrors that label.
  ########################################################################
  selector:
    matchLabels:
      app: tracking-service
  template:
    metadata:
      labels:
        app: tracking-service
      ######################################################################
      # Annotations used by Prometheus to scrape metrics from the container.
      # - prometheus.io/scrape=true (enables scraping)
      # - prometheus.io/port=8082   (TCP port)
      # - prometheus.io/path=/metrics (endpoint for metrics exposure)
      ######################################################################
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8082"
        prometheus.io/path: "/metrics"
    spec:
      ######################################################################
      # Security context runs the container as a non-root user for compliance
      # with security best practices and container hardening guidelines.
      ######################################################################
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
        - name: tracking-service
          ##################################################################
          # The container image is maintained in a registry under the
          # "dogwalking" repository. The tag "latest" should be replaced or
          # pinned for production to ensure reliable rollbacks and auditing.
          ##################################################################
          image: dogwalking/tracking-service:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 8082
              name: http
          ##################################################################
          # Resource requests (minimum CPU/Memory) and limits (maximum CPU/
          # Memory) to ensure the pod gets adequate resources and can scale.
          ##################################################################
          resources:
            requests:
              cpu: "250m"
              memory: "512Mi"
            limits:
              cpu: "500m"
              memory: "1Gi"
          ##################################################################
          # Liveness Probe ensures the container is functional. If this check
          # fails repeatedly, Kubernetes will restart the pod.
          ##################################################################
          livenessProbe:
            httpGet:
              path: /health
              port: 8082
            initialDelaySeconds: 30
            periodSeconds: 10
          ##################################################################
          # Readiness Probe verifies if this container is ready to serve
          # traffic. If not ready, traffic is held until the probe succeeds.
          ##################################################################
          readinessProbe:
            httpGet:
              path: /ready
              port: 8082
            initialDelaySeconds: 15
            periodSeconds: 5
          ##################################################################
          # Environment variables from ConfigMap and Secret references.
          # tracking-service-config: Non-sensitive runtime configuration.
          # tracking-service-secrets: Sensitive credentials (MQTT, etc.).
          ##################################################################
          envFrom:
            - configMapRef:
                name: tracking-service-config
            - secretRef:
                name: tracking-service-secrets

---
################################################################################
# Service Manifest
# Exposes the Tracking Service internally to the cluster under a stable DNS
# name (tracking-service.tracking-service.svc.cluster.local) and port 8082.
################################################################################
apiVersion: v1
kind: Service
metadata:
  name: tracking-service
  namespace: tracking-service
  labels:
    app: tracking-service
spec:
  ########################################################################
  # ClusterIP for internal communication. Pods can discover the service
  # for real-time location tracking data exchange. Ports mapped to 8082.
  ########################################################################
  type: ClusterIP
  ports:
    - port: 8082
      targetPort: 8082
      protocol: TCP
      name: http
  selector:
    app: tracking-service

---
################################################################################
# HorizontalPodAutoscaler Manifest
# Dynamically scales the number of pods based on CPU and memory utilization
# thresholds, ranging from 3 replicas up to a maximum of 10.
################################################################################
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: tracking-service
  namespace: tracking-service
spec:
  ########################################################################
  # scaleTargetRef references this HPA to the Deployment named "tracking-service"
  # in the same namespace, controlling the minReplicas and maxReplicas.
  ########################################################################
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: tracking-service
  ########################################################################
  # Ensuring at least 3 replicas remain available for high availability
  # and can scale to a maximum of 10 under heavy location-tracking load.
  ########################################################################
  minReplicas: 3
  maxReplicas: 10
  ########################################################################
  # Metrics define the triggers for autoscaling:
  # - CPU utilization at 70% average
  # - Memory utilization at 80% average
  ########################################################################
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80