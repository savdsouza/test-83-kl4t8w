# -----------------------------------------------------------------------------------
# Kubernetes manifest for deploying and managing the Authentication microservice.
# Validated against Kubernetes v1.28 (see external import reference).
# Implements production-grade settings including high availability, security context,
# resource optimization, and integrated monitoring based on the technical specifications.
# -----------------------------------------------------------------------------------

apiVersion: v1
kind: List
items:
  # -----------------------------------------------------------------------------
  # Service: auth-service
  #
  # Provides a stable network identity for the authentication microservice
  # within the 'auth-service' namespace. Exposes port 3000 internally via a
  # ClusterIP Service for other services in the cluster to access. Annotations
  # enable Prometheus scraping for metrics at /metrics on port 3000.
  # -----------------------------------------------------------------------------
  - apiVersion: v1
    kind: Service
    metadata:
      name: auth-service
      namespace: auth-service
      labels:
        app: auth-service
        component: backend
        part-of: dog-walking-platform
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
    spec:
      type: ClusterIP
      ports:
        - port: 3000
          targetPort: 3000
          protocol: TCP
          name: http
      selector:
        app: auth-service

  # -----------------------------------------------------------------------------
  # Deployment: auth-service
  #
  # Ensures a highly available replica set (3 replicas) of the auth service pods.
  # RollingUpdate strategy configures zero-downtime updates. Security context
  # enforces minimal privileges and a read-only filesystem. Resource requests
  # and limits are configured with best-practice allocations for Node.js/Express.
  # -----------------------------------------------------------------------------
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: auth-service
      namespace: auth-service
      labels:
        app: auth-service
        component: backend
        part-of: dog-walking-platform
    spec:
      replicas: 3
      strategy:
        type: RollingUpdate
        rollingUpdate:
          maxSurge: 1
          maxUnavailable: 0
      selector:
        matchLabels:
          app: auth-service
      template:
        metadata:
          labels:
            app: auth-service
          annotations:
            # Prometheus annotations for scraping metrics from port 3000 at /metrics
            prometheus.io/scrape: "true"
            prometheus.io/port: "3000"
            prometheus.io/path: "/metrics"
        spec:
          # Service account for fine-grained permissions if using RBAC
          serviceAccountName: auth-service-sa

          # Pod Security Context ensures container runs as non-root user
          securityContext:
            runAsUser: 1000
            runAsGroup: 1000
            fsGroup: 1000
            seccompProfile:
              type: RuntimeDefault

          containers:
            - name: auth-service
              image: "dogwalking/auth-service:latest"
              imagePullPolicy: Always

              # Container port definition for the Node.js service
              ports:
                - containerPort: 3000
                  protocol: TCP

              # Resource requests and limits for CPU and memory to avoid over- or under-provisioning
              resources:
                requests:
                  cpu: "250m"
                  memory: "512Mi"
                limits:
                  cpu: "500m"
                  memory: "1Gi"

              # Pull environment variables from ConfigMap (auth-service-config) and Secret (auth-service-secrets)
              envFrom:
                - configMapRef:
                    name: auth-service-config
                - secretRef:
                    name: auth-service-secrets

              # Liveness probe to ensure the container is healthy over time
              livenessProbe:
                httpGet:
                  path: /health
                  port: 3000
                initialDelaySeconds: 30
                periodSeconds: 30
                timeoutSeconds: 5
                failureThreshold: 3

              # Readiness probe to ensure the container is ready to serve traffic
              readinessProbe:
                httpGet:
                  path: /health
                  port: 3000
                initialDelaySeconds: 15
                periodSeconds: 10
                timeoutSeconds: 3
                failureThreshold: 3

              # Startup probe allows extra time for the service to initialize on startup
              startupProbe:
                httpGet:
                  path: /health
                  port: 3000
                initialDelaySeconds: 5
                periodSeconds: 5
                failureThreshold: 30

              # Volume mounts for JWT key storage (read-only) and temporary directory
              volumeMounts:
                - name: jwt-keys
                  mountPath: /app/keys
                  readOnly: true
                - name: tmp
                  mountPath: /tmp

              # Container security context to drop all capabilities and disable privilege escalation
              securityContext:
                allowPrivilegeEscalation: false
                readOnlyRootFilesystem: true
                capabilities:
                  drop:
                    - ALL

          # Volumes declared for JWT key secrets and a temporary directory
          volumes:
            - name: jwt-keys
              secret:
                secretName: auth-service-jwt-keys
            - name: tmp
              emptyDir: {}