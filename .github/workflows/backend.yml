# ------------------------------------------------------------------------------
# GitHub Actions Workflow: Backend CI/CD Pipeline
#
# This workflow orchestrates the build, test, security scan, and deployment of
# multiple backend microservices (API Gateway, Auth Service, Booking Service).
# It includes environment promotion from staging to production with a manual
# approval step, container security scanning (Snyk), and advanced caching for
# improved performance. The pipeline strictly follows enterprise practices
# for robustness, security, and maintainability.
# ------------------------------------------------------------------------------

name: "Backend CI/CD"

# ------------------------------------------------------------------------------
# Trigger events to run this workflow on push to 'main' and on pull requests
# targeting 'main'. Adjust branch filters as desired.
# ------------------------------------------------------------------------------
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# ------------------------------------------------------------------------------
# Global environment variables and secrets. These include Docker registry
# credentials, AWS credentials, Snyk token, and more as per specification.
# ------------------------------------------------------------------------------
env:
  DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

jobs:
  # ============================================================================
  # JOB: build-api-gateway
  # Purpose: Builds and tests the Node.js API Gateway microservice using steps
  # specified in the "build_node_service" function from the system design.
  # ============================================================================
  build-api-gateway:
    name: "Build & Test: API Gateway"
    runs-on: ubuntu-latest

    steps:
      # ------------------------------------------------------------------------
      # 1. Checkout the repository
      # ------------------------------------------------------------------------
      - name: Checkout Code
        uses: actions/checkout@v4 # v4 - Repository checkout with LFS support

      # ------------------------------------------------------------------------
      # 2. Set up Node.js environment for the API Gateway (Node 18.x LTS)
      # ------------------------------------------------------------------------
      - name: Set up Node
        uses: actions/setup-node@v4 # v4 - Node 18.x
        with:
          node-version: "18"

      # ------------------------------------------------------------------------
      # 3. Restore and populate npm cache for faster build times
      #    The cache key includes the package-lock.json hash for accuracy
      # ------------------------------------------------------------------------
      - name: Cache NPM Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: api-gateway-${{ runner.os }}-${{ hashFiles('src/backend/api-gateway/package-lock.json') }}
          restore-keys: |
            api-gateway-${{ runner.os }}-

      # ------------------------------------------------------------------------
      # 4. Install dependencies using npm ci, ensuring a clean slate
      # ------------------------------------------------------------------------
      - name: Install Dependencies
        run: npm ci
        working-directory: src/backend/api-gateway

      # ------------------------------------------------------------------------
      # 5. Run ESLint to check code style and lint errors
      # ------------------------------------------------------------------------
      - name: Lint Code
        run: npm run lint
        working-directory: src/backend/api-gateway

      # ------------------------------------------------------------------------
      # 6. Execute Jest unit tests with minimum coverage thresholds
      # ------------------------------------------------------------------------
      - name: Run Unit Tests
        run: npm run test:coverage
        working-directory: src/backend/api-gateway

      # ------------------------------------------------------------------------
      # 7. Run npm audit for security vulnerabilities in dependencies
      # ------------------------------------------------------------------------
      - name: Security Audit (npm)
        run: npm audit --audit-level=moderate
        working-directory: src/backend/api-gateway

      # ------------------------------------------------------------------------
      # 8. Build the TypeScript code (strict checks, noEmitOnError, etc.)
      # ------------------------------------------------------------------------
      - name: Build TypeScript
        run: npm run build
        working-directory: src/backend/api-gateway

      # ------------------------------------------------------------------------
      # 9. Set up Snyk for advanced security scanning (dependencies + code)
      # ------------------------------------------------------------------------
      - name: Snyk Setup
        uses: snyk/actions/setup@v3 # v3 - Snyk security scanning
        with:
          token: ${{ env.SNYK_TOKEN }}

      # ------------------------------------------------------------------------
      # 10. Run Snyk Test to detect published vulnerabilities in the codebase
      # ------------------------------------------------------------------------
      - name: Snyk Dependency Scan
        run: snyk test
        working-directory: src/backend/api-gateway

      # ------------------------------------------------------------------------
      # 11. Log in to Docker registry before building container
      # ------------------------------------------------------------------------
      - name: Docker Login
        uses: docker/login-action@v3 # v3 - Secure Docker registry auth
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # ------------------------------------------------------------------------
      # 12. Set up Buildx to leverage build caching and multi-platform builds
      # ------------------------------------------------------------------------
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3 # v3 - Enhanced Docker build

      # ------------------------------------------------------------------------
      # 13. Build Docker image with BuildKit caching
      # ------------------------------------------------------------------------
      - name: Build Docker Image
        run: |
          docker build \
            --file Dockerfile \
            --tag ${{ env.DOCKER_REGISTRY }}/api-gateway:latest \
            .
        working-directory: src/backend/api-gateway

      # ------------------------------------------------------------------------
      # 14. Scan the built container image with Snyk Container
      # ------------------------------------------------------------------------
      - name: Snyk Container Scan
        run: snyk container test ${{ env.DOCKER_REGISTRY }}/api-gateway:latest
        working-directory: src/backend/api-gateway

      # ------------------------------------------------------------------------
      # 15. Push Docker image to the registry if the build and scans pass
      # ------------------------------------------------------------------------
      - name: Push Docker Image
        run: |
          docker push ${{ env.DOCKER_REGISTRY }}/api-gateway:latest
        working-directory: src/backend/api-gateway

  # ============================================================================
  # JOB: build-auth-service
  # Purpose: Builds and tests the Node.js Auth Service microservice using steps
  # specified in the "build_node_service" function from the system design.
  # ============================================================================
  build-auth-service:
    name: "Build & Test: Auth Service"
    runs-on: ubuntu-latest

    steps:
      # ------------------------------------------------------------------------
      # 1. Checkout the repository
      # ------------------------------------------------------------------------
      - name: Checkout Code
        uses: actions/checkout@v4 # v4

      # ------------------------------------------------------------------------
      # 2. Set up Node.js environment for the Auth Service (Node 18.x LTS)
      # ------------------------------------------------------------------------
      - name: Set up Node
        uses: actions/setup-node@v4 # v4
        with:
          node-version: "18"

      # ------------------------------------------------------------------------
      # 3. Cache npm dependencies for the auth-service
      # ------------------------------------------------------------------------
      - name: Cache NPM Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: auth-service-${{ runner.os }}-${{ hashFiles('src/backend/auth-service/package-lock.json') }}
          restore-keys: |
            auth-service-${{ runner.os }}-

      # ------------------------------------------------------------------------
      # 4. Install dependencies via npm ci
      # ------------------------------------------------------------------------
      - name: Install Dependencies
        run: npm ci
        working-directory: src/backend/auth-service

      # ------------------------------------------------------------------------
      # 5. Lint the codebase for style and errors
      # ------------------------------------------------------------------------
      - name: Lint Code
        run: npm run lint
        working-directory: src/backend/auth-service

      # ------------------------------------------------------------------------
      # 6. Run Jest unit tests and coverage
      # ------------------------------------------------------------------------
      - name: Run Unit Tests
        run: npm run test:coverage
        working-directory: src/backend/auth-service

      # ------------------------------------------------------------------------
      # 7. Perform npm audit for security vulnerabilities
      # ------------------------------------------------------------------------
      - name: Security Audit (npm)
        run: npm audit --audit-level=moderate
        working-directory: src/backend/auth-service

      # ------------------------------------------------------------------------
      # 8. Compile TypeScript application
      # ------------------------------------------------------------------------
      - name: Build TypeScript
        run: npm run build
        working-directory: src/backend/auth-service

      # ------------------------------------------------------------------------
      # 9. Set up Snyk for advanced security scanning
      # ------------------------------------------------------------------------
      - name: Snyk Setup
        uses: snyk/actions/setup@v3 # v3
        with:
          token: ${{ env.SNYK_TOKEN }}

      # ------------------------------------------------------------------------
      # 10. Run Snyk Dependency Scan to detect vulnerabilities
      # ------------------------------------------------------------------------
      - name: Snyk Dependency Scan
        run: snyk test
        working-directory: src/backend/auth-service

      # ------------------------------------------------------------------------
      # 11. Docker login with provided registry credentials
      # ------------------------------------------------------------------------
      - name: Docker Login
        uses: docker/login-action@v3 # v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # ------------------------------------------------------------------------
      # 12. Initialize Docker Buildx
      # ------------------------------------------------------------------------
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3 # v3

      # ------------------------------------------------------------------------
      # 13. Build the Docker image for auth-service
      # ------------------------------------------------------------------------
      - name: Build Docker Image
        run: |
          docker build \
            --file Dockerfile \
            --tag ${{ env.DOCKER_REGISTRY }}/auth-service:latest \
            .
        working-directory: src/backend/auth-service

      # ------------------------------------------------------------------------
      # 14. Scan the newly built container image with Snyk
      # ------------------------------------------------------------------------
      - name: Snyk Container Scan
        run: snyk container test ${{ env.DOCKER_REGISTRY }}/auth-service:latest
        working-directory: src/backend/auth-service

      # ------------------------------------------------------------------------
      # 15. Push Docker image to registry
      # ------------------------------------------------------------------------
      - name: Push Docker Image
        run: |
          docker push ${{ env.DOCKER_REGISTRY }}/auth-service:latest
        working-directory: src/backend/auth-service

  # ============================================================================
  # JOB: build-booking-service
  # Purpose: Builds and tests the Java-based Booking Service using steps
  # specified in the "build_java_service" function from the system design.
  # ============================================================================
  build-booking-service:
    name: "Build & Test: Booking Service"
    runs-on: ubuntu-latest

    steps:
      # ------------------------------------------------------------------------
      # 1. Checkout the repository
      # ------------------------------------------------------------------------
      - name: Checkout Code
        uses: actions/checkout@v4 # v4

      # ------------------------------------------------------------------------
      # 2. Set up Java environment (Java 17)
      # ------------------------------------------------------------------------
      - name: Set up Java
        uses: actions/setup-java@v3 # v3
        with:
          java-version: "17"
          distribution: "temurin"
          cache: "maven"

      # ------------------------------------------------------------------------
      # 3. Restore Maven cache automatically (handled by setup-java@v3)
      # ------------------------------------------------------------------------
      #    Additional caching can be added if needed. The official maven cache
      #    from setup-java@v3 will handle .m2 directory caching.

      # ------------------------------------------------------------------------
      # 4. Run SpotBugs static analysis for code quality and security
      #    (SpotBugs integration can be configured as a Maven plugin or separate)
      # ------------------------------------------------------------------------
      - name: SpotBugs Analysis
        run: mvn spotbugs:spotbugs
        working-directory: src/backend/booking-service

      # ------------------------------------------------------------------------
      # 5. Execute unit tests with JaCoCo coverage. Integration tests included.
      # ------------------------------------------------------------------------
      - name: Run Tests & Coverage
        run: mvn -B clean verify
        working-directory: src/backend/booking-service

      # ------------------------------------------------------------------------
      # 6. Set up Snyk for advanced security scanning
      # ------------------------------------------------------------------------
      - name: Snyk Setup
        uses: snyk/actions/setup@v3 # v3
        with:
          token: ${{ env.SNYK_TOKEN }}

      # ------------------------------------------------------------------------
      # 7. Snyk scan for Maven dependencies
      # ------------------------------------------------------------------------
      - name: Snyk Dependency Scan
        run: snyk test --all-sub-projects
        working-directory: src/backend/booking-service

      # ------------------------------------------------------------------------
      # 8. Docker login to push built images
      # ------------------------------------------------------------------------
      - name: Docker Login
        uses: docker/login-action@v3 # v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # ------------------------------------------------------------------------
      # 9. Initialize Docker Buildx for multi-platform/cached builds
      # ------------------------------------------------------------------------
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3 # v3

      # ------------------------------------------------------------------------
      # 10. Build the Docker image for the booking-service using the JAR
      # ------------------------------------------------------------------------
      - name: Build Docker Image
        run: |
          docker build \
            --file Dockerfile \
            --tag ${{ env.DOCKER_REGISTRY }}/booking-service:latest \
            .
        working-directory: src/backend/booking-service

      # ------------------------------------------------------------------------
      # 11. Perform a container scan with Snyk or alternative scanning
      # ------------------------------------------------------------------------
      - name: Snyk Container Scan
        run: snyk container test ${{ env.DOCKER_REGISTRY }}/booking-service:latest
        working-directory: src/backend/booking-service

      # ------------------------------------------------------------------------
      # 12. Push Docker image to the registry
      # ------------------------------------------------------------------------
      - name: Push Docker Image
        run: |
          docker push ${{ env.DOCKER_REGISTRY }}/booking-service:latest
        working-directory: src/backend/booking-service

  # ============================================================================
  # JOB: deploy-staging
  # Purpose: Deploys the newly built images to a staging environment using the
  # "canary release strategy" from the "deploy_service" function. This job
  # triggers automatically upon successful builds of all three services.
  # ============================================================================
  deploy-staging:
    name: "Deploy to Staging (Canary)"
    runs-on: ubuntu-latest
    needs: 
      - build-api-gateway
      - build-auth-service
      - build-booking-service
    environment: staging

    steps:
      # ------------------------------------------------------------------------
      # 1. Canary release environment setup & AWS authentication
      # ------------------------------------------------------------------------
      - name: AWS CLI Setup
        run: |
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set default.region us-east-1

      # ------------------------------------------------------------------------
      # 2. Deploy canary version (10% traffic)
      #    In a real scenario, we would use AWS CLI or CDK to update ECS services.
      # ------------------------------------------------------------------------
      - name: Deploy Canary
        run: |
          echo "Deploying canary (10% traffic) for all services in STAGING..."
          # Placeholder for actual AWS CLI or CDK commands

      # ------------------------------------------------------------------------
      # 3. Monitor health metrics for a short period (5 minutes)
      # ------------------------------------------------------------------------
      - name: Monitor Health
        run: |
          echo "Monitoring canary health for 5 minutes..."
          sleep 300

      # ------------------------------------------------------------------------
      # 4. Run synthetic / integration tests against the canary
      # ------------------------------------------------------------------------
      - name: Synthetic Tests
        run: |
          echo "Running synthetic tests on staging environment..."
          # Placeholder for test scripts, e.g. newman or artillery

      # ------------------------------------------------------------------------
      # 5. Shift traffic to 100% if tests pass
      # ------------------------------------------------------------------------
      - name: Complete Canary Rollout
        run: |
          echo "All checks passed. Moving traffic to 100% canary..."

      # ------------------------------------------------------------------------
      # 6. Verify final health checks
      # ------------------------------------------------------------------------
      - name: Final Health Check
        run: |
          echo "Verifying health after full traffic shift..."

      # ------------------------------------------------------------------------
      # 7. Tag the deployment in GitHub for traceability
      # ------------------------------------------------------------------------
      - name: Tag Deployment
        run: |
          LAST_COMMIT=$(git rev-parse HEAD)
          git tag -a "staging-deployment-$(date +%Y%m%d%H%M%S)" -m "Staging Deploy - $LAST_COMMIT"
          git push origin --tags

  # ============================================================================
  # JOB: deploy-production
  # Purpose: Deploys to the production environment upon manual approval,
  # following successful staging deployment and health checks. This ensures
  # a strict environment promotion workflow as per enterprise guidelines.
  # ============================================================================
  deploy-production:
    name: "Deploy to Production"
    runs-on: ubuntu-latest
    needs: deploy-staging
    environment: production

    # --------------------------------------------------------------------------
    # A manual approval gate can be configured in the GitHub Settings UI for
    # the "production" environment, requiring a reviewer to confirm deployment.
    # --------------------------------------------------------------------------
    steps:
      # ------------------------------------------------------------------------
      # 1. Re-authenticate with AWS for production region
      # ------------------------------------------------------------------------
      - name: AWS CLI Setup
        run: |
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set default.region us-east-1

      # ------------------------------------------------------------------------
      # 2. Deploy with canary or direct approach (depending on policy)
      # ------------------------------------------------------------------------
      - name: Deploy Canary (Production)
        run: |
          echo "Deploying canary (10% traffic) for PRODUCTION environment..."
          # Placeholder for actual AWS CLI or CDK commands

      # ------------------------------------------------------------------------
      # 3. Monitor canary health in production
      # ------------------------------------------------------------------------
      - name: Monitor Health
        run: |
          echo "Monitoring production canary for 5 minutes..."
          sleep 300

      # ------------------------------------------------------------------------
      # 4. Optional synthetic or smoke tests in production (read-only checks)
      # ------------------------------------------------------------------------
      - name: Synthetic Tests
        run: |
          echo "Running synthetic tests in production..."

      # ------------------------------------------------------------------------
      # 5. Shift traffic to 100% upon success
      # ------------------------------------------------------------------------
      - name: Complete Production Rollout
        run: |
          echo "All checks passed in production canary. Shifting to 100%..."

      # ------------------------------------------------------------------------
      # 6. Final health check to confirm stability
      # ------------------------------------------------------------------------
      - name: Final Health Check
        run: |
          echo "Final health check in production..."

      # ------------------------------------------------------------------------
      # 7. Tag the deployment for production traceability
      # ------------------------------------------------------------------------
      - name: Tag Deployment
        run: |
          LAST_COMMIT=$(git rev-parse HEAD)
          git tag -a "production-deployment-$(date +%Y%m%d%H%M%S)" -m "Production Deploy - $LAST_COMMIT"
          git push origin --tags