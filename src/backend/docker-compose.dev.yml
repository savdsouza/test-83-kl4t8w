################################################################################
# DOCKER COMPOSE FILE: DEVELOPMENT ENVIRONMENT
# ------------------------------------------------------------------------------
# This file defines the development environment Docker Compose configuration for
# the Dog Walking Platform. It orchestrates multiple microservices:
#   1) API Gateway (Node.js)    - Exposes REST/WebSocket endpoints, forwards requests
#   2) Auth Service (Node.js)   - Manages authentication, tokens, and role-based access
#   3) Booking Service (Java)   - Handles walk bookings, scheduling, and transactional logic
#   4) Payment Service (Node.js)- Processes payments, billing, and transaction records
#   5) Notification (Python)    - Manages push/email/SMS notifications
#   6) Tracking (Go)            - Offers real-time GPS tracking, geofencing, and route data
#
# It also provisions core databases:
#   - PostgreSQL      (15-alpine)       : Stores user profiles, authentication data
#   - MongoDB         (6.0)             : Stores bookings, walk records, reviews
#   - Redis           (7.0-alpine)      : Handles caching, session data, rate-limiting
#   - TimescaleDB     (latest-pg15)     : Stores time-series GPS and location data
#
# FEATURES & ENHANCEMENTS FOR DEVELOPMENT:
#   - Hot reloading / volume mounts for local source code changes
#   - Debug ports exposed (e.g., Node.js inspector)
#   - Limited resource allocations for efficient local usage
#   - Basic container security with dropped capabilities, read-only suggestions
#   - Health checks to verify each containerâ€™s readiness
#
# REFERENCES (From Technical Specs & JSON Specification):
#   - Section 2.1 High-Level Architecture: Microservices + Databases
#   - Section 8.1 Deployment Environment : Dev config with debugging & resource mgmt
#   - Section 8.3.2 Container Security   : Basic network isolation & security options
#
# NOTE:
#   - Each service runs on the 'dogwalking_dev' network, providing isolation.
#   - The 'postgres' service uses a named volume ('postgres_data') for persistence.
#   - Additional microservices (Auth, Booking, etc.) are included as placeholders
#     with minimal placeholders/images for local development. Dockerfiles or
#     further instructions might reside in separate folders.
################################################################################

version: "3.8"

services:
  ##############################################################################
  # POSTGRES: Primary relational database (PostgreSQL 15-alpine)
  # ---------------------------------------------------------------------------
  # Stores user accounts, authentication data, user roles, transaction records,
  # and other structured relational domain data. Uses a named volume for data
  # persistence across container restarts. 
  ##############################################################################
  postgres:
    image: "postgres:15-alpine" # (v15-alpine) from external import specification
    container_name: "postgres-dev"
    restart: unless-stopped
    environment:
      POSTGRES_USER: "devuser"
      POSTGRES_PASSWORD: "devpass"
      POSTGRES_DB: "dogwalking_db"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U devuser -d dogwalking_db || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - dogwalking_dev
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL

  ##############################################################################
  # MONGODB: Non-relational database (MongoDB 6.0)
  # ---------------------------------------------------------------------------
  # Stores booking records, walk metadata, reviews, and flexible JSON documents.
  # In dev, uses ephemeral or local volume storage if desired.
  ##############################################################################
  mongodb:
    image: "mongo:6.0" # (v6.0) from external import specification
    container_name: "mongodb-dev"
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: "devuser"
      MONGO_INITDB_ROOT_PASSWORD: "devpass"
    ports:
      - "27017:27017"
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.runCommand({ ping: 1 })"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - dogwalking_dev
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL

  ##############################################################################
  # REDIS: In-memory database & cache (Redis 7.0-alpine)
  # ---------------------------------------------------------------------------
  # Used in dev mode for session storage, real-time data caching, rate limiting,
  # and ephemeral use cases. 
  ##############################################################################
  redis:
    image: "redis:7.0-alpine" # (v7.0-alpine) from external import specification
    container_name: "redis-dev"
    command: ["redis-server", "--save", "", "--appendonly", "no"]
    # ^ Disables persistence in dev for quick iteration.
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - dogwalking_dev
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL

  ##############################################################################
  # TIMESCALEDB: Time-series database (timescale/timescaledb:latest-pg15)
  # ---------------------------------------------------------------------------
  # Stores GPS tracking data for active walks with geospatial/time-series queries.
  # In development, ephemeral usage is typical unless you wish to persist.
  ##############################################################################
  timescaledb:
    image: "timescale/timescaledb:latest-pg15"
    container_name: "timescaledb-dev"
    restart: unless-stopped
    environment:
      POSTGRES_DB: "tracker_db"
      POSTGRES_USER: "devuser"
      POSTGRES_PASSWORD: "devpass"
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U devuser -d tracker_db -p 5432 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - dogwalking_dev
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL

  ##############################################################################
  # API GATEWAY: Node.js-based gateway service
  # ---------------------------------------------------------------------------
  # - Source code: ./api-gateway
  # - Dockerfile:  ./api-gateway/Dockerfile (multi-stage build)
  # - Ports: 3000 (HTTP), 9229 (Node.js Inspector)
  # - Healthcheck: /health endpoint
  # - Volume for hot reloading: ./api-gateway -> /usr/src/app
  # - Resources: Limited to 512 MB memory, 0.5 CPU
  # - Basic security: no-new-privileges, drop capabilities
  ##############################################################################
  api-gateway:
    build:
      context: "./api-gateway"
      target: "development"
    container_name: "api-gateway-dev"
    ports:
      - "3000:3000"  # Application port
      - "9229:9229"  # Debugger port (Node.js Inspector)
    volumes:
      - "./api-gateway:/usr/src/app"
      - "/usr/src/app/node_modules"
    environment:
      NODE_ENV: "development"
      PORT: "3000"
      DEBUG_PORT: "9229"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: "512M"
          cpus: "0.5"
    depends_on:
      - postgres
      - mongodb
      - redis
      - timescaledb
    networks:
      - dogwalking_dev
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL

  ##############################################################################
  # AUTH SERVICE (Placeholder for Node.js Auth microservice)
  # ---------------------------------------------------------------------------
  # - Node.js environment used per specification
  # - Ports, environment variables, volumes, etc. can be refined as needed
  # - In typical dev usage, the source code would be volume-mounted
  # - This placeholder references environment variables for DB connections
  ##############################################################################
  auth-service:
    image: "node:18-alpine"
    container_name: "auth-service-dev"
    command: ["sh", "-c", "npm install && npm run dev"]
    # ^ Example entrypoint if local package.json is in /usr/src/auth-service
    ports:
      - "4000:4000"
    environment:
      NODE_ENV: "development"
      DB_HOST: "postgres"
      DB_PORT: "5432"
      DB_USER: "devuser"
      DB_PASS: "devpass"
      REDIS_HOST: "redis"
      REDIS_PORT: "6379"
    volumes:
      - "./auth-service:/usr/src/auth-service"
    depends_on:
      - postgres
      - redis
    networks:
      - dogwalking_dev
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL

  ##############################################################################
  # BOOKING SERVICE (Placeholder for Java/Spring Boot microservice)
  # ---------------------------------------------------------------------------
  # - Java 17 environment for booking logic
  # - Interacts with MongoDB for walk records or PostgreSQL if needed
  ##############################################################################
  booking-service:
    image: "openjdk:17-slim"
    container_name: "booking-service-dev"
    command: ["sh", "-c", "java -jar /usr/src/booking/app.jar"]
    ports:
      - "5000:5000"
    environment:
      SPRING_PROFILES_ACTIVE: "dev"
      MONGO_HOST: "mongodb"
      MONGO_PORT: "27017"
      POSTGRES_HOST: "postgres"
      POSTGRES_PORT: "5432"
      POSTGRES_USER: "devuser"
      POSTGRES_PASSWORD: "devpass"
    volumes:
      - "./booking-service:/usr/src/booking"
    depends_on:
      - mongodb
      - postgres
    networks:
      - dogwalking_dev
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL

  ##############################################################################
  # PAYMENT SERVICE (Placeholder for Node.js microservice)
  # ---------------------------------------------------------------------------
  # - Manages payment flows, billing, and transaction records
  # - Connects to external payment gateway in dev (mock or real sandbox)
  ##############################################################################
  payment-service:
    image: "node:18-alpine"
    container_name: "payment-service-dev"
    command: ["sh", "-c", "npm install && npm run dev"]
    ports:
      - "7000:7000"
    environment:
      NODE_ENV: "development"
      PORT: "7000"
      POSTGRES_HOST: "postgres"
      POSTGRES_PORT: "5432"
      POSTGRES_USER: "devuser"
      POSTGRES_PASSWORD: "devpass"
    volumes:
      - "./payment-service:/usr/src/payment-service"
    depends_on:
      - postgres
    networks:
      - dogwalking_dev
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL

  ##############################################################################
  # NOTIFICATION SERVICE (Placeholder for Python microservice)
  # ---------------------------------------------------------------------------
  # - Handles push notifications, emails, SMS
  # - Could integrate with APNs, FCM, Twilio, SendGrid, etc.
  ##############################################################################
  notification-service:
    image: "python:3.11-slim"
    container_name: "notification-service-dev"
    command: ["sh", "-c", "pip install -r requirements.txt && python main.py"]
    ports:
      - "8000:8000"
    environment:
      PYTHONUNBUFFERED: "1"
      REDIS_HOST: "redis"
      REDIS_PORT: "6379"
      MONGO_HOST: "mongodb"
      MONGO_PORT: "27017"
    volumes:
      - "./notification-service:/usr/src/notification-service"
    depends_on:
      - redis
      - mongodb
    networks:
      - dogwalking_dev
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL

  ##############################################################################
  # TRACKING SERVICE (Placeholder for Go microservice)
  # ---------------------------------------------------------------------------
  # - Provides real-time GPS tracking & route optimization
  # - Stores data in TimescaleDB for time-series analysis
  ##############################################################################
  tracking-service:
    image: "golang:1.21"
    container_name: "tracking-service-dev"
    working_dir: "/usr/src/tracking-service"
    command: ["sh", "-c", "go mod tidy && go run main.go"]
    ports:
      - "6000:6000"
    environment:
      TIMESCALE_HOST: "timescaledb"
      TIMESCALE_PORT: "5432"
      TIMESCALE_DB: "tracker_db"
      TIMESCALE_USER: "devuser"
      TIMESCALE_PASSWORD: "devpass"
    volumes:
      - "./tracking-service:/usr/src/tracking-service"
    depends_on:
      - timescaledb
    networks:
      - dogwalking_dev
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL

################################################################################
# VOLUMES: Named volumes for data persistence and isolation
# ------------------------------------------------------------------------------
# The specification calls specifically for 'postgres_data'. Other services 
# can use ephemeral or external volumes as needed.
################################################################################
volumes:
  postgres_data:
    # Named volume to store PostgreSQL data
    # Ensures data persists across container restarts in dev environment
    name: "dogwalking_postgres_dev"

################################################################################
# NETWORKS: Isolated bridge network for local communication
# ------------------------------------------------------------------------------
# All containers join 'dogwalking_dev', allowing them to resolve each other by
# their container names (e.g. 'api-gateway', 'postgres') while remaining
# isolated from the host or other networks by default.
################################################################################
networks:
  dogwalking_dev:
    driver: bridge