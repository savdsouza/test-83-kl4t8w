###################################################################################################
# Kubernetes ConfigMap: Centralized Configuration for Dog Walking Platform
# -----------------------------------------------------------------------------------------------
# This ConfigMap provides a single source of configuration data for all microservices in the Dog
# Walking Platform, ensuring consistent system configuration, service integration, and monitoring.
# The sections below contain JSON or YAML definitions tailored to each serviceâ€™s requirements.
#
# Contents:
#  1. api-gateway-config.json:    Configuration for the Node.js API Gateway (security, server settings)
#  2. booking-service-config.yaml: Configuration for the Spring Boot Booking Service (MongoDB, Kafka)
#  3. tracking-service-config.json: Configuration for the Go-based Tracking Service (MQTT, TimescaleDB)
#  4. logging-config.json:         Centralized logging configuration for all microservices
#  5. monitoring-config.json:      Metrics and tracing configuration for advanced system insights
###################################################################################################
apiVersion: v1
kind: ConfigMap
metadata:
  name: dogwalking-config
  namespace: dogwalking
  labels:
    app.kubernetes.io/name: dogwalking-config
    app.kubernetes.io/part-of: dogwalking-platform
    app.kubernetes.io/component: configuration
data:
  ###############################################################################################
  # 1. API Gateway Configuration
  #    - Includes server properties (port, timeouts, compression)
  #    - Security settings (Helmet options, trust proxy, CSP directives)
  #    - Rate limiting, health checks
  ###############################################################################################
  api-gateway-config.json: |
    {
      "server": {
        "port": 3000,
        "api-version": "v1",
        "body-limit": "10mb",
        "compression": true,
        "timeout": 30000,
        "rate-limit": {
          "window": "15m",
          "max-requests": 1000,
          "skip-trusted": true
        },
        "health-check": {
          "enabled": true,
          "path": "/health",
          "interval": "30s"
        }
      },
      "security": {
        "trust-proxy": true,
        "helmet-options": {
          "content-security-policy": {
            "directives": {
              "default-src": ["'self'"],
              "script-src": ["'self'", "'unsafe-inline'"],
              "style-src": ["'self'", "'unsafe-inline'"],
              "img-src": ["'self'", "data:", "https:"],
              "connect-src": ["'self'", "wss:", "https:"]
            }
          },
          "cross-origin-embedder-policy": true,
          "cross-origin-opener-policy": true,
          "dns-prefetch-control": true,
          "frameguard": true,
          "hide-powered-by": true,
          "hsts": {
            "maxAge": 31536000,
            "includeSubDomains": true,
            "preload": true
          },
          "xss-filter": true
        }
      }
    }

  ###############################################################################################
  # 2. Booking Service Configuration (Spring Boot / application.yaml style)
  #    - Mappings for MongoDB (database, connection pool, write concern)
  #    - Kafka settings for producer and consumer (bootstrap servers, retries, batch sizes)
  ###############################################################################################
  booking-service-config.yaml: |
    spring:
      application-name: booking-service
      data:
        mongodb:
          host: mongodb-service
          port: 27017
          database: dogwalking_bookings
          auto-index-creation: true
          connection-pool:
            max-size: 50
            min-size: 5
            max-wait-time: 5000
            max-connection-life-time: 30000
            max-connection-idle-time: 60000
            maintenance-interval: 5000
          write-concern:
            w: "majority"
            j: true
            wtimeout: 5000
        kafka:
          bootstrap-servers: kafka-service:9092
          consumer:
            group-id: booking-service
            auto-offset-reset: latest
            max-poll-records: 500
            session-timeout-ms: 45000
            heartbeat-interval-ms: 3000
          producer:
            retries: 3
            batch-size: 16384
            linger-ms: 1
            buffer-memory: 33554432

  ###############################################################################################
  # 3. Tracking Service Configuration (Go-based)
  #    - MQTT connection details (host, port, timeout, QoS, retry intervals)
  #    - TimescaleDB database settings (port, max connections, SSL mode, compression)
  ###############################################################################################
  tracking-service-config.json: |
    {
      "mqtt": {
        "host": "mqtt-broker",
        "port": 1883,
        "connection-timeout": "30s",
        "keep-alive": "60s",
        "clean-session": true,
        "qos": 1,
        "retry": {
          "initial-interval": "1s",
          "max-interval": "30s",
          "max-attempts": 5
        }
      },
      "database": {
        "host": "timescaledb-service",
        "port": 5432,
        "database": "dogwalking_tracking",
        "max-connections": 50,
        "idle-timeout": "10m",
        "statement-timeout": "30s",
        "ssl-mode": "verify-full",
        "compression": true
      }
    }

  ###############################################################################################
  # 4. Logging Configuration
  #    - Global log levels for various packages (root, com.dogwalking, org.mongodb, etc.)
  #    - Pattern layout for console and file appenders
  #    - File appender settings (log rotation, max size, total size cap)
  ###############################################################################################
  logging-config.json: |
    {
      "level": {
        "root": "INFO",
        "com.dogwalking": "DEBUG",
        "org.springframework": "INFO",
        "org.mongodb": "WARN",
        "org.apache.kafka": "WARN"
      },
      "pattern": {
        "console": "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n",
        "file": "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
      },
      "appenders": {
        "console": {
          "enabled": true,
          "threshold": "INFO"
        },
        "file": {
          "enabled": true,
          "path": "/var/log/dogwalking/application.log",
          "max-size": "100MB",
          "max-history": 30,
          "total-size-cap": "3GB"
        }
      }
    }

  ###############################################################################################
  # 5. Monitoring and Tracing Configuration
  #    - Metrics export with Prometheus endpoint, sampling step, and descriptive naming
  #    - Tracing features, baggage correlation, propagation type (B3), Jaeger endpoint
  ###############################################################################################
  monitoring-config.json: |
    {
      "metrics": {
        "enabled": true,
        "export": {
          "prometheus": {
            "enabled": true,
            "step": "60s",
            "descriptions": true,
            "endpoint": "/actuator/prometheus"
          }
        },
        "tags": {
          "application": "${spring.application.name}",
          "environment": "${ENV:production}"
        }
      },
      "tracing": {
        "enabled": true,
        "sampling-rate": 1.0,
        "baggage-correlation": true,
        "propagation": {
          "type": "B3",
          "enabled": true
        },
        "endpoints": {
          "jaeger": "http://jaeger-collector:14268/api/traces"
        }
      }
    }